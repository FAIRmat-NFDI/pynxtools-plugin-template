[build-system]
requires = ["setuptools>=64.0.1", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-4-Clause': 'License :: OSI Approved :: BSD License',
    'Apache-2.0': 'License :: OSI Approved :: Apache Software License',
    'GPL-3.0-or-later': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} %}

[project]
name = "pynxtools-{{cookiecutter.reader_name}}"
dynamic = ["version"]
authors = [
    { name = "{{cookiecutter.author_name}}", email = "{{cookiecutter.author_email}}" },
]
description = "{{cookiecutter.description}}"
readme = "README.md"
{%- if cookiecutter.license in license_classifiers %}
license= {text = "{{ cookiecutter.license }}"}
{%- endif %}
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
{%- if cookiecutter.license in license_classifiers %}
    "{{ license_classifiers[cookiecutter.license] }}",
{%- endif %}
    "Operating System :: OS Independent",
]
dependencies = [
    "pynxtools>=0.0.10"
]

[project.optional-dependencies]
dev = [
    "mypy",
    "ruff==0.3.4",
    "pytest",
    "types-pyyaml",
    "pip-tools",
    "pre-commit",
]

[project.entry-points."pynxtools.reader"]
{{cookiecutter.reader_name}} = "pynxtools_{{cookiecutter.reader_name}}.reader:{{cookiecutter.class_name}}"

[tool.setuptools_scm]
version_scheme = "no-guess-dev"
local_scheme = "node-and-date"

[tool.ruff]
include = ["pynxtools_{{cookiecutter.reader_name}}/*.py", "tests/*.py"]
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E", # pycodestyle
    "W", # pycodestyle
    "PL", # pylint
]
ignore = [
    "E501", # Line too long ({width} > {limit} characters)
    "E701", # Multiple statements on one line (colon)
    "E731", # Do not assign a lambda expression, use a def
    "E402",  # Module level import not at top of file
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used instead of constant
    "PLW0603", # Using the global statement
    "PLW2901", # redefined-loop-name
    "PLR1714", # consider-using-in
    "PLR5501", # else-if-used
]
fixable = ["ALL"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
strict = false
ignore_missing_imports = true
follow_imports = "silent"
no_strict_optional = true
disable_error_code = "import, annotation-unchecked"